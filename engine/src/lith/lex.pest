// Whitespace, comments ////////////////////////////////////////////////////////

	WHITESPACE = _{ " " | "\t" | NEWLINE }
	COMMENT = { BlockComment | LineComment }
	LineComment = { "//" ~ (!("/" | "!") | "//") ~ "\n"* | "//" }
	BlockComment = {
		"/*" ~ (!("*" | "!") | "**" | BlockCommentOrDoc) ~
		(BlockCommentOrDoc | (!"*/" ~ ANY))* ~
		"*/" | "/**/" | "/***/"
	}
	InnerLineDoc = { "//!" ~ !("\n" | IsolatedCr)* }
	InnerBlockDoc = {
		"/*!" ~ (BlockCommentOrDoc | (!("*/" | IsolatedCr) ~ ANY))* ~ "*/"
	}
	OuterLineDoc = { "///" ~ (!"/" ~ !("\n" | IsolatedCr)*)? }
	OuterBlockDoc = {
		"/**" ~
		(!"*" | BlockCommentOrDoc) ~
		(BlockCommentOrDoc | (!("*/" | IsolatedCr) ~ ANY))* ~
		"*/"
	}
	BlockCommentOrDoc = { BlockComment | OuterBlockDoc | InnerBlockDoc }
	IsolatedCr = { "\r" ~ (!"\n" ~ ANY) }

// Top-level ///////////////////////////////////////////////////////////////////

	TokenStream = { SOI ~ Token* ~ EOI }

	Token = _{ Literal | Keyword | Ident | Symbol }

// Literals ////////////////////////////////////////////////////////////////////

	Literal = _{ NullLit | BoolLit | NumLit | CharLit | StringLit }

	NullLit = { "null" }
	BoolLit = { "true" | "false" }

	QuoteEscape = { "\\'" | "\\\"" }
	AsciiEscape = @{
		("\\x" ~ ASCII_OCT_DIGIT ~ ASCII_HEX_DIGIT) |
		"\\n" | "\\r" | "\\t" | "\\\\" | "\\0"
	}
	UnicodeEscape = @{ "\\u" ~ (ASCII_HEX_DIGIT ~ "_"*){1,6} }
	CharLit = @{
		"'" ~
		(!("'" | "\\" | "\n" | "\r" | "\t") ~ ANY
		| QuoteEscape | AsciiEscape | UnicodeEscape) ~
		"'"
	}

	StringLit = @{
		"\"" ~ (
			!("\"" | "\\" | IsolatedCr) ~
			(ANY | QuoteEscape | AsciiEscape | UnicodeEscape)
		)* ~ "\""
	}

	NumLit = _{ IntLit | FloatLit }
	IntLit = @{ (DecLit | BinLit | OctLit | HexLit) ~ IntSuffix? }
	IntSuffix = {
		"i8" | "i16" | "i32" | "i64" | "i128" |
		"u8" | "u16" | "u32" | "u64" | "u128"
	}
	DecLit = @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
	BinLit = @{
		"0b" ~
		(ASCII_BIN_DIGIT | "_")* ~
		ASCII_BIN_DIGIT ~
		(ASCII_BIN_DIGIT | "_")*
	}
	OctLit = @{
		"0o" ~
		(ASCII_OCT_DIGIT | "_")* ~
		ASCII_OCT_DIGIT ~
		(ASCII_OCT_DIGIT | "_")*
	}
	HexLit = @{
		"0x" ~
		(ASCII_HEX_DIGIT | "_")* ~
		ASCII_HEX_DIGIT ~
		(ASCII_HEX_DIGIT | "_")*
	}

	FloatLit = @{
		DecLit ~ "." ~ FloatPointFollow |
		DecLit ~ FloatExponent |
		DecLit ~ "." ~ DecLit ~ FloatExponent? |
		DecLit ~ ("." ~ DecLit)? ~ FloatExponent? ~ FloatSuffix
	}
	FloatPointFollow = _{ !("." | "_" | XID_START) ~ ANY }
	FloatExponent = @{
		^"e" ~ ("+" | "-")? ~
		(ASCII_DIGIT | "_")* ~
		ASCII_DIGIT ~
		(ASCII_DIGIT | "_")*
	}
	FloatSuffix = { "f32" | "f64" }

	RawString = @{ "r" ~ PUSH("#"*) ~ "\"" ~ RawStringInner ~ "\"" ~ POP }
	RawStringInner = @{ (!("\"" ~ PEEK) ~ ANY)* }

// Keywords ////////////////////////////////////////////////////////////////////

	Keyword = {
		"abstract" | "break" | "catch" | "ceval" | "class" | "const" |
		"continue" | "defer" | "do" | "else" | "enum" | "final" | "finally" |
		"for" | "foreach" | "if" | "in" | "interface" | "is" | "let" | "loop" |
		"macro" | "mixin" | "native" | "out" | "override" | "private" |
		"property" | "protected" | "public" | "return" | "static" | "struct" |
		"try" | "type" | "typeof" | "union" | "unsafe" | "until" | "virtual" |
		"while" | "yield"
	}

// Symbols /////////////////////////////////////////////////////////////////////

	Symbol = _{
		BackTick | Tilde | Exclamation | At | Pound | Dollar | Percent | Caret |
		Ampersand | Asterisk | LeftParen | RightParen | Minus | Underscore |
		Plus | Equals | VertLine | BackSlash | LeftBracket | RightBracket |
		LeftBrace | RightBrace | Colon | Semicolon | Comma | Period | LeftAngle |
		RightAngle | Question | ForwardSlash
	}

	BackTick = { "`" }
	Tilde = { "~" }
	Exclamation = { "!" }
	At = { "@" }
	Pound = { "#" }
	Dollar = { "$" }
	Percent = { "%" }
	Caret = { "^" }
	Ampersand = { "&" }
	Asterisk = { "*" }
	LeftParen = { "(" }
	RightParen = { ")" }
	Minus = { "-" }
	Underscore = { "_" }
	Plus = { "+" }
	Equals = { "=" }
	VertLine = { "|" }
	BackSlash = { "\\" }
	LeftBracket = { "[" }
	RightBracket = { "]" }
	LeftBrace = { "{" }
	RightBrace = { "}" }
	Colon = { ":" }
	Semicolon = { ";" }
	Comma = { "," }
	Period = { "." }
	LeftAngle = { "<" }
	RightAngle = { ">" }
	Question = { "?" }
	ForwardSlash = { "/" }

// Miscellaneous ///////////////////////////////////////////////////////////////

	Ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
